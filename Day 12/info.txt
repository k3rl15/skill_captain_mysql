Deadlocks in MySQL

Concept:

A deadlock in MySQL occurs when two or more transactions are waiting for each other to release a lock on a resource, such as a table or a row in a table, that they need to 
complete their transaction. This can cause a standstill in the database, where none of the transactions can proceed.

For example, if transaction A has a lock on row 1 of table X and is waiting for a lock on row 2 of table Y, while transaction B has a lock on row 2 of table Y and is waiting 
for a lock on row 1 of table X, both transactions will be stuck waiting for the other to release the lock. This creates a deadlock.
Deadlocks can be automatically resolved by MySQL by rolling back one of the transactions and allowing the other to proceed, but this can cause data inconsistencies and should 
be avoided if possible.

To prevent deadlocks:
Avoid long-running transactions: Long-running transactions increase the likelihood of deadlocks. Try to keep transactions short and focused.
Use the appropriate lock type: Use shared locks when reading resources, and exclusive locks when writing to resources.
Acquire locks in a consistent order: If transactions acquire locks in different orders, it can lead to deadlocks. Make sure that all transactions acquire locks in the same 
order.
Use the lowest level of isolation: The higher the level of isolation, the more locks are acquired, increasing the likelihood of deadlocks. Use the lowest level of isolation 
that meets your application's requirements.
